package com.couchbase.code_snippets;

import com.couchbase.lite.*;

import java.net.URI;

public class Examples {

    // tag::getting-started[]
    private static final String SYNC_GATEWAY_URL = "ws://localhost:4984/db"; //<1>

    public void testGettingStarted() {
        // Initialize Couchbase Lite
        CouchbaseLite.init(); // <2>

        // Get the database (and create it if it doesnâ€™t exist).
        DatabaseConfiguration config = new DatabaseConfiguration();
        config.setEncryptionKey(new EncryptionKey("PASSWORD")); // <3>
        Database database = new Database("mydb", config);

        // Create a new document (i.e. a record) in the database.
        MutableDocument mutableDoc = new MutableDocument()
                .setDouble("version", 2.0)
                .setString("type", "SDK");

        // Save it to the database.
        database.save(mutableDoc);

        // Update a document.
        mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
        mutableDoc.setString("language", "Java");
        database.save(mutableDoc);

        Document document = database.getDocument(mutableDoc.getId());
        // Log the document ID (generated by the database) and properties
        System.out.println("Document ID is :: " + document.getId());
        System.out.println("Learning " + document.getString("language"));

        // Create a query to fetch documents of type SDK.
        Query query = QueryBuilder.select(SelectResult.all())
                .from(DataSource.database(database))
                .where(Expression.property("type").equalTo(Expression.string("SDK")));
        ResultSet result = query.execute();
        System.out.println("Number of rows ::  " + result.allResults().size());

        // Create a query to fetch documents of type SDK.
        Document document2 = database.getDocument("demo101");
        // Log the document ID (generated by the database) and properties
        System.out.println("Document ID :: " + document2.getId());
        System.out.println("Learning " + document2.getString("foo"));


        Endpoint targetEndpoint = new URLEndpoint(new URI(SYNC_GATEWAY_URL));
        ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
        replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

        // Add authentication.
        replConfig.setAuthenticator(new BasicAuthenticator("demo", "password"));

        // Create replicator (be sure to hold a reference somewhere that will prevent the Replicator from being GCed)
        Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        replicator.addChangeListener(change -> {
            if (change.getStatus().getError() != null) {
                System.err.println("Error code ::  " + change.getStatus().getError().getCode());
            }

        });

        // Start replication.
        replicator.start();

        // Check status of replication and wait till it is completed
        while (replicator.getStatus().getActivityLevel() != Replicator.ActivityLevel.STOPPED) {
            Thread.sleep(1000);
        }

        System.out.println("Finish!");

        System.exit(0); // <4>
    }
    // end::getting-started[]


    public void testInitializer() {
        // tag::sdk-initializer[]
        // Initialize the Couchbase Lite system
        CouchbaseLite.init();
        // end::sdk-initializer[]
    }
}
