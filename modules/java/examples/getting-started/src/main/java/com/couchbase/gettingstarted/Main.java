package com.couchbase.gettingstarted;

import androidx.annotation.NonNull;

import java.net.URI;
import java.net.URISyntaxException;

import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.CouchbaseLite;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Dictionary;
import com.couchbase.lite.Document;
import com.couchbase.lite.Expression;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ReplicatorType;
import com.couchbase.lite.Result;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;


public class Main {
    // The URL for the SGW, e.g.: "ws://localhost:4984/getting-started-db"
    // If set to null, no replicator will be run.
    public static final String SYNC_GATEWAY_URL = null;

    public static void main(String[] args) {

        // tag::getting-started[]

        CouchbaseLite.init();
        // <.>
        // Create a database
        System.out.println("Starting DB");
        DatabaseConfiguration cfg = new DatabaseConfiguration();
        Database database;
        try {
            database = new Database("mydb", cfg);
        }
        catch (CouchbaseLiteException e) {
            throw new RuntimeException(e);
        }

        // <.>
        // Create a new document (i.e. a record) in the database.
        MutableDocument mutableDoc =
            new MutableDocument().setString("version", "2.0")
                .setString("type", "SDK");

        // <.>
        // Save it to the database.
        try {
            database.save(mutableDoc);
        }
        catch (CouchbaseLiteException e) {
            throw new RuntimeException(e);
        }

        // <.>
        // Retrieve and update a document.
        Document doc = database.getDocument(mutableDoc.getId());
        if (doc != null) {
            mutableDoc = doc
                .toMutable()
                .setString("language", "Kotlin");
            try {
                database.save(mutableDoc);
            }
            catch (CouchbaseLiteException e) {
                throw new RuntimeException(e);
            }
        }

        // <.>
        // Retrieve immutable document and log the document ID
        // generated by the database and some document properties
        Document document = database.getDocument(mutableDoc.getId());
        if (document == null) {
            System.out.println("No such document :: " + mutableDoc.getId());
        }
        else {
            System.out.println("Document ID :: " + document.getId());
            System.out.println("Learning :: " + document.getString("language"));
        }

        // <.>
        // Create a query to fetch documents of type SDK.
        Query listQuery = QueryBuilder.select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type")
                .equalTo(Expression.string("SDK")));

        try (ResultSet results = listQuery.execute()) {
            for (Result result: results.allResults()) {
                System.out.println("Number of rows :: " + result.count());
                Dictionary dict = result.getDictionary(0);
                if (dict == null) { continue; }
                for (String k: dict.getKeys()) {
                    System.out.println(k + " = " + dict.getString(k));
                }
            }
        }
        catch (CouchbaseLiteException e) {
            throw new RuntimeException(e);
        }

        //  <.>
        // OPTIONAL -- if you have Sync Gateway Installed you can try replication too
        // Create a replicator to push and pull changes to and from the cloud.
        // Be sure to hold a reference somewhere to prevent the Replicator from being GCed
        // BasicAuthenticator basAuth = new BasicAuthenticator("sync-gateway", "password".toCharArray());

        if (SYNC_GATEWAY_URL == null) { return; }

        ReplicatorConfiguration replConfig;
        try {
            replConfig = new ReplicatorConfiguration(
                database,
                new URLEndpoint(new URI(SYNC_GATEWAY_URL)))
                .setType(ReplicatorType.PUSH_AND_PULL)
                .setAuthenticator(
                    new BasicAuthenticator(
                        "sync-gateway",
                        "password".toCharArray()));
        }
        catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }

        Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        // Version using Kotlin Flows to follow shortly ...
        replicator.addChangeListener(new ReplicatorChangeListener() {
            @Override
            public void changed(@NonNull ReplicatorChange change) {
                if (change.getStatus().getError() != null) {
                    System.out.println("Error code ::  ${err.code}");
                }
            }
        });

        // Start replication.
        replicator.start();
    }
}
// end::getting-started[]

