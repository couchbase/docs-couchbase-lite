package com.couchbase.gettingStarted;



import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.Document;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Expression;
import com.couchbase.lite.QueryBuilder;
import  com.couchbase.lite.Query;
import com.couchbase.lite.CouchbaseLite;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.Result;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;

import com.couchbase.lite.ReplicatorType;
import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.internal.CouchbaseLiteInternal.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import com.couchbase.lite.Database;

public class Main {

    public static void main(String[] args) throws CouchbaseLiteException {

        // tag::getting-started[]

        CouchbaseLite.init();
        // <.>
        // Create a database
        System.out.println("Starting DB");
        DatabaseConfiguration cfg = new DatabaseConfiguration();
        Database database = null;
        try {
            database = new Database(  "mydb", cfg);
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }

        // <.>
        // Create a new document (i.e. a record) in the database.
        MutableDocument mutableDoc =
                new MutableDocument().setString("version", "2.0")
                        .setString("type", "SDK");

        // <.>
        // Save it to the database.
        try {
            database.save(mutableDoc);
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }

        // <.>
        // Retrieve and update a document.
        mutableDoc =
                database.getDocument(mutableDoc.getId())
                        .toMutable()
                        .setString("language", "Kotlin");
        try {
            database.save(mutableDoc);
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }

        // <.>
        // Retrieve immutable document and log the document ID
        // generated by the database and some document properties
        Document document = database.getDocument(mutableDoc.getId());
        System.out.println( String.format("Document ID :: %s", document.getId()));
        System.out.println( String.format("Learning :: %s:", document.getString("language")));

        // <.>
        // Create a query to fetch documents of type SDK.
        Query listQuery = QueryBuilder.select(SelectResult.all())
                .from(DataSource.database(database))
                .where(Expression.property("type").equalTo(Expression.string("SDK")));

        try {
            for (Result result : listQuery.execute().allResults()) {
                for ( String k : result.getDictionary(0).getKeys()) {
                    System.out.println( k + " = " + result.getDictionary(0).getString(k));

                }
//                            String.format("Number of rows :: %n",
//                                    rs.size()));
            }
        } catch (CouchbaseLiteException e) {
            e.printStackTrace();
        }


        //  <.>
        // OPTIONAL -- if you have Sync Gateway Installed you can try replication too
        // Create a replicator to push and pull changes to and from the cloud.
        // Be sure to hold a reference somewhere to prevent the Replicator from being GCed
        // BasicAuthenticator basAuth = new BasicAuthenticator("sync-gateway", "password".toCharArray());

        //ReplicatorConfiguration replConfig =
        //        new ReplicatorConfiguration(database,
        //                URLEndpoint( URI("ws://localhost:4984/getting-started-db")),
        //                        ReplicatorType.PUSH_AND_PULL,
        //                        basAuth);
        //
        //Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        // Version using Kotlin Flows to follow shortly ...

        //replicator.addChangeListener(new ReplicatorChangeListener() {
        //             @Override
        //             public void changed(@NonNull ReplicatorChange change) {
        //                     if (change.getStatus().getError() != null) {
        //                             System.out.println( "Error code ::  ${err.code}");
        //                     }
        //             }
        //     });


        // Start replication.
        // replicator.start();

    }
}
// end::getting-started[]

