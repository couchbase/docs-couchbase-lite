package com.example.getstarted_ktx

import android.app.Application
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle

import android.content.Context
import com.couchbase.lite.Database
import com.couchbase.lite.DatabaseConfigurationFactory
import com.couchbase.lite.ReplicatorConfigurationFactory
import com.couchbase.lite.Replicator
import com.couchbase.lite.MutableDocument
import com.couchbase.lite.Expression
import com.couchbase.lite.QueryBuilder
import com.couchbase.lite.CouchbaseLite
import com.couchbase.lite.SelectResult
import com.couchbase.lite.create
import com.couchbase.lite.URLEndpoint
import com.couchbase.lite.ReplicatorType
import com.couchbase.lite.BasicAuthenticator
import com.couchbase.lite.DataSource
import android.util.Log
import java.net.URI


// tag::getting-started[]
class MainActivity : AppCompatActivity() {

    private var TAG = "CBL-GS"
    private var cntx: Context = this

    override fun onCreate(savedInstanceState: Bundle?) {

        super.onCreate(savedInstanceState)

        // One-off initialization
        CouchbaseLite.init(cntx)
        Log.i(TAG,"Initialized CBL")

        //
        // <.> Create a database
        Log.i(TAG, "Starting DB")
        val cfg = DatabaseConfigurationFactory.create()
        val database = Database(  "mydb", cfg)

        // <.>
        // Create a new document (i.e. a record) in the database.
        var mutableDoc = MutableDocument().setFloat("version", 2.0f).setString("type", "SDK")

        // <.>
        // Save it to the database.
        database.save(mutableDoc)

        // <.>
        // Retrieve and update a document.
        mutableDoc = database.getDocument(mutableDoc.id)!!.toMutable().setString("language", "Java")
        database.save(mutableDoc)

        // <.>
        // Retrieve immutable document and log the document ID
        // generated by the database and some document properties
        val document = database.getDocument(mutableDoc.id)!!
        Log.i(TAG, "Document ID :: ${document.id}")
        Log.i(TAG, "Learning ${document.getString("language")}")

        // <.>
        // Create a query to fetch documents of type SDK.
        val rs = QueryBuilder.select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("SDK")))
            .execute()
        Log.i(TAG, "Number of rows :: ${rs.allResults().size}")

        //  <.>
        // OPTIONAL -- if you have Sync Gateway Installed you can try replication too
        // Create a replicator to push and pull changes to and from the cloud.
        // Be sure to hold a reference somewhere to prevent the Replicator from being GCed
        val replicator = Replicator(
            ReplicatorConfigurationFactory.create(
                database = database,
                target = URLEndpoint(URI("ws://localhost:4984/getting-started-db")),
                type = ReplicatorType.PUSH_AND_PULL,
                authenticator = BasicAuthenticator("sync-gateway", "password".toCharArray())
            )
        )

        // Listen to replicator change events.
        // Version using Kotlin Flows to follow shortly ...
        replicator.addChangeListener { change ->
            val err = change.status.error
            if (err != null) {
                Log.i(TAG, "Error code ::  ${err.code}")
            }
        }

        // Start replication.
        replicator.start()

    }
}
// end::getting-started[]

