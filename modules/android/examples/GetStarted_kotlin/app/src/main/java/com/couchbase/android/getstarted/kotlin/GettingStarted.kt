//
// Copyright (c) 2023 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package com.couchbase.android.getstarted.kotlin

import android.content.Context
import android.util.Log
import com.couchbase.lite.BasicAuthenticator
import com.couchbase.lite.CouchbaseLite
import com.couchbase.lite.DataSource
import com.couchbase.lite.Database
import com.couchbase.lite.DatabaseConfigurationFactory
import com.couchbase.lite.Expression
import com.couchbase.lite.MutableDocument
import com.couchbase.lite.QueryBuilder
import com.couchbase.lite.Replicator
import com.couchbase.lite.ReplicatorConfigurationFactory
import com.couchbase.lite.ReplicatorType
import com.couchbase.lite.SelectResult
import com.couchbase.lite.URLEndpoint
import com.couchbase.lite.create
import java.net.URI

class GettingStarted(
    private val context: Context,
    private val database: Database
) {

    // tag::getting-started[]

    // One-off initialization
    fun init() {
        CouchbaseLite.init(context)
        Log.i(TAG, "Initialized CBL")

    }

    //
    // <.> Create a database
    fun createDb() {
        Log.i(TAG, "Starting DB")
        val cfg = DatabaseConfigurationFactory.create()
        val database = Database("mydb", cfg)
    }


    // <.>
    // Create a new document (i.e. a record) in the database.
    fun createDoc() {
        val mutableDoc = MutableDocument().setFloat("version", 2.0f).setString("type", "SDK")

        // <.>
        // Save it to the database.
        database.save(mutableDoc)
    }

    // <.>
    // Retrieve and update a document.
    fun updateDoc(docId: String) {
        val mutableDoc = database.getDocument(docId)?.toMutable()?.setString("language", "Java")
        mutableDoc?.let { database.save(it) }
    }

    // <.>
    // Retrieve immutable document and log the document ID
    // generated by the database and some document properties
    fun retrieveDoc(docId: String) {
        val document = database.getDocument(docId)
        Log.i(TAG, "Document ID :: ${document?.id}")
        Log.i(TAG, "Learning ${document?.getString("language")}")

        // <.>
        // Create a query to fetch documents of type SDK.
        val rs = QueryBuilder.select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("SDK")))
            .execute()
        Log.i(TAG, "Number of rows :: ${rs.allResults().size}")
    }

    //  <.>
    // OPTIONAL -- if you have Sync Gateway Installed you can try replication too
    // Create a replicator to push and pull changes to and from the cloud.
    // Be sure to hold a reference somewhere to prevent the Replicator from being GCed
    fun replication() {
        val replicator = Replicator(
            ReplicatorConfigurationFactory.create(
                database = database,
                target = URLEndpoint(URI("ws://localhost:4984/getting-started-db")),
                type = ReplicatorType.PUSH_AND_PULL,
                authenticator = BasicAuthenticator("sync-gateway", "password".toCharArray())
            )
        )

        // Listen to replicator change events.
        // Use token.remove to stop the listener
        // Version using Kotlin Flows to follow shortly ...
        val token = replicator.addChangeListener { change ->
            val err = change.status.error
            if (err != null) {
                Log.i(TAG, "Error code ::  ${err.code}")
            }
        }

        // Start replication.
        replicator.start()
    }
    // end::getting-started[]

    companion object {
        private const val TAG = "START_KOTLIN"
    }
}
