//
// Copyright (c) 2023 Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package com.couchbase.android.getstarted.java;

import android.content.Context;
import android.util.Log;

import java.net.URI;
import java.net.URISyntaxException;

import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.CouchbaseLite;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Document;
import com.couchbase.lite.Expression;
import com.couchbase.lite.ListenerToken;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ReplicatorType;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;


public class GettingStarted {
    private static final String TAG = "START_JAVA";

    private final Context context;
    private final Database database;

    public GettingStarted(Context context, Database database) {
        this.context = context;
        this.database = database;
    }

    // tag::getting-started[]
    // One-off initialization
    public void init() {
        CouchbaseLite.init(context);
        Log.i(TAG, "Initialized CBL");
    }

    //
    // <.>
    // Create a database
    public void createDb() throws CouchbaseLiteException {
        Log.i(TAG, "Starting DB");
        DatabaseConfiguration cfg = new DatabaseConfiguration();
        Database database = new Database("mydb", cfg);
    }

    // <.>
    // Create a new document (i.e. a record) in the database.
    public void retrieveDoc() throws CouchbaseLiteException {
        MutableDocument mutableDoc =
            new MutableDocument().setFloat("version", 2.0f)
                .setString("type", "SDK");

        // <.>
        // Save it to the database.
        database.save(mutableDoc);
    }

    // <.>
    // Retrieve and update a document.
    public void updateDoc(String docId) throws CouchbaseLiteException {
        MutableDocument mutableDoc =
            database.getDocument(docId)
                .toMutable()
                .setString("language", "Java");

        database.save(mutableDoc);
    }

    // <.>
    // Retrieve immutable document and log the document ID
    // generated by the database and some document properties
    public void retrieveDoc(String docId) throws CouchbaseLiteException {
        Document document = database.getDocument(docId);
        Log.i(TAG, "Document ID :: " + document.getId());
        Log.i(TAG, ("Learning :: " + document.getString("language")));

        // <.>
        // Create a query to fetch documents of type SDK.
        Query query = QueryBuilder.select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("SDK")));

        try (ResultSet rs = query.execute()) {
            Log.i(TAG, String.format("Number of rows :: %d", rs.allResults().size()));
        }
    }

    // <.>
    // OPTIONAL -- if you have Sync Gateway Installed you can try replication too
    // Create a replicator to push and pull changes to and from the cloud.
    // Be sure to hold a reference somewhere to prevent the Replicator from being GCed
    // BasicAuthenticator basAuth = new BasicAuthenticator("sync-gateway", "password".toCharArray());
    public void replication(String docId) throws URISyntaxException {

        ReplicatorConfiguration replConfig =
            new ReplicatorConfiguration(
                database,
                new URLEndpoint(new URI("ws://localhost:4984/getting-started-db")))
                .setType(ReplicatorType.PUSH_AND_PULL)
                .setAuthenticator(new BasicAuthenticator("sync-gateway", "password".toCharArray()));

        Replicator replicator = new Replicator(replConfig);

        // Listen to replicator change events.
        // Use `token.remove()` to stop the listener
        ListenerToken token = replicator.addChangeListener(change -> {
            CouchbaseLiteException err = change.getStatus().getError();
            if (err != null) {
                Log.i(TAG, "Error(" + err.getCode() + ") :: " + err.getMessage());
            }
        });

        // Start replication.
        replicator.start();
    }
    // end::getting-started[]
}
